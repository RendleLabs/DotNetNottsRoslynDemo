using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace RoslynDemo
{
    static class RewriterDemo
    {
        public static async Task UpshiftAllStrings(Workspace workspace)
        {
            var newSolution = workspace.CurrentSolution;

            int count = 0;

            foreach (var project in workspace.CurrentSolution.Projects)
            {
                var compilation = await project.GetCompilationAsync();
                if (compilation is null) continue;

                foreach (var document in project.Documents)
                {
                    var root = await document.GetSyntaxRootAsync();
                    if (root is null) continue;
                    
                    var model = compilation.GetSemanticModel(root.SyntaxTree, true);
                    if (model is null) continue;

                    var isAutoGenerated = root.GetLeadingTrivia()
                        .Any(ContainsAutoGeneratedComment);

                    if (isAutoGenerated) continue;
                    
                    var upshifter = new StringLiteralUpshifter(model);

                    var newRoot = upshifter.Visit(root);

                    if (!newRoot.IsEquivalentTo(root))
                    {
                        ++count;
                        newSolution = newSolution.WithDocumentSyntaxRoot(document.Id, newRoot);
                    }
                }
            }

            if (!ReferenceEquals(newSolution, workspace.CurrentSolution))
            {
                workspace.TryApplyChanges(newSolution);
                Console.Write($"{count} changes applied.");
            }
        }

        private static bool ContainsAutoGeneratedComment(SyntaxTrivia trivia)
        {
            var kind = trivia.Kind();

            if (kind != SyntaxKind.SingleLineCommentTrivia && kind != SyntaxKind.MultiLineCommentTrivia) return false;
            
            var comment = trivia.ToString();
            return comment.Contains("autogenerated") || comment.Contains("auto-generated");
        }
    }
}